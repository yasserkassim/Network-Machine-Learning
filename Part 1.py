#!/usr/bin/env python3
import pyshark, collections
import pandas as pd, numpy as np, matplotlib.pyplot as plt, seaborn as sn, ipaddress
from sklearn.feature_selection import VarianceThreshold, SelectKBest, chi2
from sklearn.preprocessing import LabelBinarizer

#This section of the code was supposed to collect the tcp stream data from a pcap, 
#but we were unable to complete this because we couldn't identify the column values in
#the packet capture. We decided to continue with the csv generated by cicflowmeter.
def pcapParser():
    capture = pyshark.FileCapture('new.pcap')
    protocolList = []
    packets = {}
    for packet in capture:
        line = str(packet)
        formattedLine = line.split(" ")
        
        try:
            packets = {
            'src_ip':packet.ip.src,
            'src_port':packet.tcp.srcport,
            'dst_ip':packet.ip.dst,
            'dst_port':packet.tcp.dstport,
            'proto':packet.transport_layer,
            'service':packet.highest_layer,
            'tcp_stream':packet.tcp.stream
            }
        #ip_flag,packet_length,transport_flag,time,eth.field_names
            print(packet.tcp.pretty_print())
        except:
            pass
        #print()

#This section of the code was designed to create our correlation heat map
#and will be described further in our report.
def csvData():

    df = pd.read_csv('http2.pcap_Flow.csv')

    labelY = pd.get_dummies(df.Label)
    labelY = LabelBinarizer().fit_transform(df.Label)
    y_base = [i[0] for i in labelY.tolist()]
    
    sourceIP, destIP = [], []
    for x in df['Src IP']:
        try:
            sourceIP.append(int(ipaddress.ip_address(x)))
        except:
            print("Cannot Convert",x)
    df['sourceIP']=sourceIP
    for x in df['Dst IP']:
        try:
            destIP.append(int(ipaddress.ip_address(x)))
        except:
            print("Cannot Convert",x)
    df['destIP']=destIP
    
    df2 = df.drop(columns=['Flow ID','Src IP','Dst IP','Timestamp','Flow IAT Min','Init Fwd Win Byts','Init Bwd Win Byts','Label'])
    #print(df2)
    #Variance Threshold Set to 85%
    selector = VarianceThreshold(threshold=0.1275)
    
    selector.fit(df2)
    df3 = df2[df2.columns[selector.get_support()]]

    case=SelectKBest(chi2, k=20)
    case.fit(df3,y_base)
    df4 = df3[df3.columns[case.get_support()]]
    correlations = df4.corr()
    sn.heatmap(correlations, annot=True)
    plt.title('Correlation Heat Map')
    plt.show()

if __name__ == "__main__":
    #pcapParser()
    csvData()
